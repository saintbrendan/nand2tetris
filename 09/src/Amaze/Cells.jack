class Cells {
  field int freeCells;
  field Array xs;
  field Array ys;

  constructor Cells new() {
    var int x;
    var int y;
    var int i;
    let freeCells = 105;
    let xs = Array.new(105);
    let ys = Array.new(105);
    let i = 0;
    let y = 0;
    while (y < 7) {
      let x = 0;
      while (x < 15) {
        let xs[i] = x;
        let ys[i] = y;
        let i = i + 1;
        let x = x + 1;
      }
      let y = y + 1;
    }
    return this;
  }

  method int getFreeCells() {
    return freeCells;
  }

  method void setFreeCells(int freeCellsIn) {
    let freeCells = freeCellsIn;
    return;
  }

  method boolean isFree(int x, int y) {
    var int location;
    var int p;
    if (x < 0) {
      return false;
    }
    if (y < 0) {
      return false;
    }
    if (x > 14) {
      return false;
    }
    if (y > 6) {
      return false;
    }
    let x = x + x + 1;
    let y = y + y + 1;
    let location = (y*512) + x + 16384;
    let p = Memory.peek(location);

    if (p = 0) {
      return false;
    }
    return true;
  }

  method Array getXs() {
    return xs;
  }

  method Array getYs() {
    return ys;
  }

  method void clear(int x, int y) {
    let x = x + x + 1;
    let y = y + y + 1;
    do BrickWall.clearBrick(x, y);
    return;
  }

  method int getFreeNeighborCount (int x, int y) {
    var int count;
    let count = 0;
    if (isFree(x, y-1)) {
       let count = count + 1;
    }
    if (isFree(x-1, y)) {
       let count = count + 1;
    }
    if (isFree(x+1, y)) {
       let count = count + 1;
    }
    if (isFree(x, y+1)) {
       let count = count + 1;
    }
    return count;
  }



  method Array getFreeNeighbors (int x, int y) {
    var Array neighbors;
    var int i;
    let i = 0;
    let neighbors = Array.new(4);
    if (isFree(x, y-1)) {
       let neighbors[i] = (y-1) * 15 + x;
       let i = i + 1;
    }
    if (isFree(x-1, y)) {
      let neighbors[i] = (y) * 15 + x -1;
      let i = i + 1;
    }
    if (isFree(x+1, y)) {
      let neighbors[i] = (y) * 15 + x+1;
      let i = i + 1;
    }
    if (isFree(x, y+1)) {
      let neighbors[i] = (y+1) * 15 + x;
    }
    return neighbors;
  }

  /**
  * 1 North
  * 2 West
  * 3 East
  * 4 South
  */
  method Array getFreeNeighborDirections (int x, int y) {
    var Array directions;
    var int i;
    let i = 0;
    let directions = Array.new(4);
    if (isFree(x, y-1)) {
       let directions[i] = 1;
       let i = i + 1;
    }
    if (isFree(x-1, y)) {
      let directions[i] = 2;
      let i = i + 1;
    }
    if (isFree(x+1, y)) {
      let directions[i] = 3;
      let i = i + 1;
    }
    if (isFree(x, y+1)) {
      let directions[i] = 4;
    }
    return directions;
  }

}
