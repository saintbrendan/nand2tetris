class MazeMaker {
  function void make(Cells cells, Randomizer randomizer) {
    var int freeCells;
    var Array mazeXs, mazeYs;
    var int mazeCellCount;
    var int x, y, bx0, by0, bx1, by1, bx2, by2;
    var int freeNeighborCount;
    var Array freeNeighborDirections;
    var int index;
    var int r;
    var int direction;
    var int mazesize;

    let mazesize = 93;
    let mazeCellCount = 0;
    let mazeXs = Array.new(105);
    let mazeYs = Array.new(105);

    let x = 14;
    let y = 6;
    do cells.clear(x,y);
    while (index < mazesize) {
      let mazeXs[mazeCellCount] = x;
      let mazeYs[mazeCellCount] = y;
      let mazeCellCount = mazeCellCount + 1;

      let freeNeighborCount = cells.getFreeNeighborCount(x,y);

      if (0 = freeNeighborCount) {
        ///do removeFromArrays(x, y, mazeXs, mazeYs, mazeCellCount);
        let mazeCellCount = mazeCellCount - 1;
        if (mazeCellCount = 0) {
          return;
        }
        let r = randomizer.randRange(mazeCellCount-1);

        let x = mazeXs[r];
        let y = mazeYs[r];
      } else {
        let r = randomizer.randRange(freeNeighborCount);
        let freeNeighborDirections = cells.getFreeNeighborDirections(x, y);
        let direction = freeNeighborDirections[r];
        let bx0 = x + x + 1;
        let by0 = y + y + 1;
        let bx1 = bx0;
        let by1 = by0;
        let bx2 = bx0;
        let by2 = by0;
        if (direction = 1) { // North
          let by1 = by0-1;
          let by2 = by0-2;
        }
        if (direction = 2) { // East
          let bx1 = bx0-1;
          let bx2 = bx0-2;
        }
        if (direction = 3) { // West
          let bx1 = bx0+1;
          let bx2 = bx0+2;
        }
        if (direction = 4) { // South
          let by1 = by0+1;
          let by2 = by0+2;
        }
        do BrickWall.clearBrick(bx1, by1);
        do BrickWall.clearBrick(bx2, by2);
        let x = (bx2 - 1) / 2;
        let y = (by2 - 1) / 2;
      }
      let index = index + 1;
    }
    return;
  }

  function void removeFromArrays(int x, int y, Array mazeXs, Array mazeYs, Array mazeCellCount) {
    var int i, max;
    let max = mazeCellCount - 1;
    let i = 0;
    while (i < mazeCellCount) {
      if (mazeXs[i] = x) {
        if (mazeYs[i] = y) {
          let mazeXs[i] = mazeXs[max];
          let mazeYs[i] = mazeYs[max];
          return;
        }
      }
    }
    return;
  }
}
